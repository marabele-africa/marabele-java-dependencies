<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.8.RELEASE</version>
        <relativePath />
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>za.co.marabele.africa</groupId>
    <artifactId>marabele-java-dependencies</artifactId>
    <version>0.0.2-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Marabele Java Dependencies</name>
    <description>
        Provides single point of control for plugin and dependency management
    </description>

    <distributionManagement>
        <repository>
            <id>marabele-africa-github</id>
            <name>GitHub OWNER Apache Maven Packages</name>
            <url>https://maven.pkg.github.com/marabele-africa/marabele-java-dependencies</url>
        </repository>
    </distributionManagement>

    <scm>
        <connection>scm:git:git@github.com:marabele-africa/marabele-java-dependencies</connection>
        <developerConnection>scm:git:git@github.com:marabele-africa/marabele-java-dependencies</developerConnection>
        <url>https://github.com/marabele-africa/marabele-java-dependencies</url>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Plugin versions -->
        <version.compiler.plugin>3.8.1</version.compiler.plugin>
        <version.javadoc.plugin>3.1.1</version.javadoc.plugin>
        <version.site.plugin>3.7.1</version.site.plugin>
        <version.surefire.plugin>3.0.0-M3</version.surefire.plugin>
        <version.failsafe.plugin>2.17</version.failsafe.plugin>
        <version.release.plugin>2.5.3</version.release.plugin>
        <version.war.plugin>3.2.3</version.war.plugin>
        <version.aspectj.plugin>1.12.1</version.aspectj.plugin>
        <version.jacoco.plugin>0.8.4</version.jacoco.plugin>
        <version.sonar.plugin>3.7.0.1746</version.sonar.plugin>
        <version.help.plugin>3.2.0</version.help.plugin>
        <version.spring-cloud-contract.plugin>2.1.2.RELEASE</version.spring-cloud-contract.plugin>

        <!--Dependency versions-->
        <spring-cloud.version>Greenwich.SR2</spring-cloud.version>
        <spring-cloud.verifier.version>2.1.2.RELEASE</spring-cloud.verifier.version>
        <cron-utils.version>7.0.7</cron-utils.version>
        <spring-mock-mvc.version>3.1.1</spring-mock-mvc.version>
        <keycloak.version>5.0.0</keycloak.version>
        <keycloak.spring.boot.2.starter.version>4.0.0.Final</keycloak.spring.boot.2.starter.version>
        <javaslang.version>0.10.0</javaslang.version>
        <springfox.version>2.9.2</springfox.version>
        <springfox.rfc6570.version>1.0.0</springfox.rfc6570.version>
        <aspectjrt.version>1.9.2</aspectjrt.version>
        <liquibase.version>3.6.2</liquibase.version>
        <commons.lang.version>3.8.1</commons.lang.version>
        <log4j.version>1.2.17</log4j.version>
        <mapstruct.version>1.3.0.Final</mapstruct.version>
        <version.modelmapper>1.1.0</version.modelmapper>
        <janino.version>3.1.0</janino.version>
        <postgres.version>9.2-1002.jdbc4</postgres.version>
        <h2.version>1.4.197</h2.version>
        <graphql.spring.boot.starter.version>5.0.2</graphql.spring.boot.starter.version>
        <graphql.webmvc.version>1.0</graphql.webmvc.version>
        <graphql.webflux.version>1.0</graphql.webflux.version>
        <graphiql.spring.boot.starter.version>5.0.2</graphiql.spring.boot.starter.version>
        <graphql.tools.version>5.2.4</graphql.tools.version>
        <graphql.extended.scalars.version>1.0</graphql.extended.scalars.version>
        <pact.version>3.5.1</pact.version>
        <mockito.version>3.0.0</mockito.version>
        <powermock.version>2.0.2</powermock.version>
        <powermock.test.version>1.6.6</powermock.test.version>
        <dbunit.version>2.6.0</dbunit.version>
        <springtest.version>1.3.0</springtest.version>

    </properties>

    <dependencyManagement>
        <dependencies>
            <!--Third Party Framework BOM dependencies-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.keycloak.bom</groupId>
                <artifactId>keycloak-adapter-bom</artifactId>
                <version>${keycloak.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring Cloud Contract  -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-verifier</artifactId>
                <version>${spring-cloud.verifier.version}</version>
            </dependency>

            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>spring-mock-mvc</artifactId>
                <version>${spring-mock-mvc.version}</version>
                <scope>test</scope>
            </dependency>

            <!--Third Party dependencies-->
            <!--Java Slang - Extended Functional Utility-->
            <dependency>
                <groupId>io.vavr</groupId>
                <artifactId>vavr</artifactId>
                <version>${javaslang.version}</version>
            </dependency>

            <!--Swagger-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${springfox.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${springfox.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox.ui</groupId>
                <artifactId>springfox-swagger-ui-rfc6570</artifactId>
                <version>${springfox.rfc6570.version}</version>
            </dependency>

            <!--Mapstruct - Annotation based mapping-->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId> <!--use mapstruct-jdk8 for Java 8 or higher-->
                <version>${mapstruct.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-jdk8</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <!--AOP dependencies-->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${aspectjrt.version}</version>
            </dependency>

            <!--Commons 3 Utils-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang.version}</version>
            </dependency>

            <!--Log4j Logging-->
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!--Liquibase-->
            <dependency>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-core</artifactId>
                <version>${liquibase.version}</version>
            </dependency>

            <!--PostgreSQL Driver-->
            <dependency>
                <groupId>postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgres.version}</version>
            </dependency>

            <!--H2 SQL Driver-->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
            </dependency>

            <!--GraphQL-->
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-spring-boot-starter</artifactId>
                <version>${graphql.spring.boot.starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-java-spring-boot-starter-webmvc</artifactId>
                <version>${graphql.webmvc.version}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-java-spring-boot-starter-webflux</artifactId>
                <version>${graphql.web.version}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphiql-spring-boot-starter</artifactId>
                <version>${graphiql.spring.boot.starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-java-tools</artifactId>
                <version>${graphql.tools.version}</version>
            </dependency>
            <dependency>
                <groupId>com.graphql-java</groupId>
                <artifactId>graphql-java-extended-scalars</artifactId>
                <version>${graphql.extended.scalars.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- Lock down plugins versions to avoid using Maven defaults-->
        <pluginManagement>
            <plugins>
                <!--The Compiler Plugin is used to compile the sources of your project -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.compiler.plugin}</version>
                </plugin>

                <!--The Javadoc Plugin uses the Javadoc tool to generate javadocs for
                the specified project -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${version.javadoc.plugin}</version>
                </plugin>

                <!--The Site Plugin is used to generate a site for the project. The generated site also includes the
                project's reports that were configured in the POM -->
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${version.site.plugin}</version>
                </plugin>

                <!--The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests
                of an application -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.surefire.plugin}</version>
                </plugin>

                <!--The Failsafe Plugin is designed to run integration tests -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.failsafe.plugin}</version>
                </plugin>

                <!--The Release Plugin is used to release a project with Maven, saving a lot of repetitive, manual work.
                Releasing a project is made in two steps: prepare and perform -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${version.release.plugin}</version>
                </plugin>

                <!--The War Plugin is used for collecting all artifact dependencies, classes and
                resources of the web application and packaging them into a web application archive -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${version.war.plugin}</version>
                </plugin>

                <!--The Aspectj Plugin is used for weaving AspectJ aspects into your classes -->
                <plugin>
                    <groupId>com.nickwongdev</groupId>
                    <artifactId>aspectj-maven-plugin</artifactId>
                    <version>${version.aspectj.plugin}</version>
                </plugin>

                <!--The JaCoCo Maven plug-in provides the JaCoCo runtime agent to your tests and allows basic
                report creation. -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${version.jacoco.plugin}</version>
                </plugin>

                <!--The Sonar Maven plug-in is used to push the JaCoCo anlysis to the SonarCube server -->
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${version.sonar.plugin}</version>
                </plugin>

                <!--The Spring Boot Plugin allows you to package executable jar
               or war archives and run an application “in-place”. -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>

                <!--The Spring Cloud Contract Verifier is a tool that enables Consumer Driven
                Contract (CDC) development of JVM-based applications. -->
                <plugin>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-contract-maven-plugin</artifactId>
                    <version>${version.spring-cloud-contract.plugin}</version>
                </plugin>

                <!--The Maven Help Plugin is used to get relative information about a project or the system.
                It can be used to get a description of a particular plugin, including the plugin's goals with
                their parameters and component requirements, the effective POM and effective settings of the current
                build, and the profiles applied to the current project being built.. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-help-plugin</artifactId>
                    <version>${version.help.plugin}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
